# RAG Chatbot Frontend Launcher
# PowerShell script to run the Streamlit frontend application
# Copyright (c) 2025 RAG Chatbot Project
# Licensed under the MIT License

param(
    [string]$ApiUrl = "",
    [string]$Environment = "prod",
    [int]$Port = 8501,
    [switch]$Help
)

# Display help information
if ($Help) {
    Write-Host "RAG Chatbot Frontend Launcher" -ForegroundColor Green
    Write-Host "=============================" -ForegroundColor Green
    Write-Host ""
    Write-Host "Usage: .\run-frontend.ps1 [options]" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "Options:" -ForegroundColor Yellow
    Write-Host "  -ApiUrl <url>     API Gateway URL (optional, will prompt if not provided)"
    Write-Host "  -Environment <env> Environment name (default: prod)"
    Write-Host "  -Port <number>    Port number for Streamlit (default: 8501)"
    Write-Host "  -Help             Show this help message"
    Write-Host ""
    Write-Host "Examples:" -ForegroundColor Yellow
    Write-Host "  .\run-frontend.ps1"
    Write-Host "  .\run-frontend.ps1 -ApiUrl 'https://api-id.execute-api.region.amazonaws.com/prod'"
    Write-Host "  .\run-frontend.ps1 -Port 8502 -Environment dev"
    Write-Host ""
    exit 0
}

# Function to display banner
function Show-Banner {
    Write-Host ""
    Write-Host "ü§ñ RAG Chatbot Frontend Launcher" -ForegroundColor Cyan
    Write-Host "=================================" -ForegroundColor Cyan
    Write-Host ""
}

# Function to check if Python is installed
function Test-Python {
    try {
        $pythonVersion = python --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Python found: $pythonVersion" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå Python not found. Please install Python 3.11 or later." -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "‚ùå Python not found. Please install Python 3.11 or later." -ForegroundColor Red
        return $false
    }
}

# Function to check if Streamlit is installed
function Test-Streamlit {
    try {
        $streamlitVersion = streamlit --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Streamlit found: $streamlitVersion" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ö†Ô∏è  Streamlit not found. Installing..." -ForegroundColor Yellow
            pip install streamlit
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Streamlit installed successfully" -ForegroundColor Green
                return $true
            } else {
                Write-Host "‚ùå Failed to install Streamlit" -ForegroundColor Red
                return $false
            }
        }
    } catch {
        Write-Host "‚ö†Ô∏è  Streamlit not found. Installing..." -ForegroundColor Yellow
        pip install streamlit
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Streamlit installed successfully" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå Failed to install Streamlit" -ForegroundColor Red
            return $false
        }
    }
}

# Function to get API URL
function Get-ApiUrl {
    if ($ApiUrl -eq "") {
        Write-Host ""
        Write-Host "üîó API Gateway Configuration" -ForegroundColor Yellow
        Write-Host "=============================" -ForegroundColor Yellow
        Write-Host ""
        Write-Host "Please provide your API Gateway URL:" -ForegroundColor White
        Write-Host "Example: https://abc123def4.execute-api.ap-southeast-1.amazonaws.com/prod" -ForegroundColor Gray
        Write-Host ""
        
        do {
            $ApiUrl = Read-Host "Enter API Gateway URL"
            if ($ApiUrl -eq "") {
                Write-Host "‚ùå API URL cannot be empty. Please try again." -ForegroundColor Red
            } elseif ($ApiUrl -notmatch "^https://.*\.execute-api\..*\.amazonaws\.com/.*$") {
                Write-Host "‚ö†Ô∏è  Warning: URL doesn't match expected API Gateway format." -ForegroundColor Yellow
                $confirm = Read-Host "Continue anyway? (y/n)"
                if ($confirm -eq "y" -or $confirm -eq "Y") {
                    break
                } else {
                    $ApiUrl = ""
                }
            }
        } while ($ApiUrl -eq "")
    }
    
    return $ApiUrl
}

# Function to create environment file
function Set-EnvironmentFile {
    param([string]$ApiUrl, [string]$Environment)
    
    $envContent = @"
# RAG Chatbot Environment Configuration
# Generated by run-frontend.ps1 on $(Get-Date)

API_GATEWAY_URL=$ApiUrl
ENVIRONMENT=$Environment
"@
    
    $envFile = "application/frontend/.env"
    $envContent | Out-File -FilePath $envFile -Encoding UTF8
    Write-Host "‚úÖ Environment file created: $envFile" -ForegroundColor Green
}

# Function to run Streamlit
function Start-Streamlit {
    param([string]$ApiUrl, [string]$Environment, [int]$Port)
    
    Write-Host ""
    Write-Host "üöÄ Starting RAG Chatbot Frontend..." -ForegroundColor Green
    Write-Host "====================================" -ForegroundColor Green
    Write-Host ""
    Write-Host "Configuration:" -ForegroundColor Yellow
    Write-Host "  API URL: $ApiUrl" -ForegroundColor White
    Write-Host "  Environment: $Environment" -ForegroundColor White
    Write-Host "  Port: $Port" -ForegroundColor White
    Write-Host ""
    Write-Host "Opening browser..." -ForegroundColor Cyan
    Write-Host "Press Ctrl+C to stop the server" -ForegroundColor Gray
    Write-Host ""
    
    # Set environment variables
    $env:API_GATEWAY_URL = $ApiUrl
    $env:ENVIRONMENT = $Environment
    
    # Change to frontend directory
    Push-Location "application/frontend"
    
    try {
        # Run Streamlit
        streamlit run app.py --server.port $Port --server.address localhost --browser.gatherUsageStats false
    } finally {
        Pop-Location
    }
}

# Function to check if API is accessible
function Test-ApiAccess {
    param([string]$ApiUrl)
    
    Write-Host ""
    Write-Host "üîç Testing API connectivity..." -ForegroundColor Yellow
    
    try {
        $response = Invoke-RestMethod -Uri "$ApiUrl/health" -Method GET -TimeoutSec 10
        Write-Host "‚úÖ API is accessible and responding" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ö†Ô∏è  Warning: Could not reach API at $ApiUrl" -ForegroundColor Yellow
        Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "   The frontend will still start, but API calls may fail." -ForegroundColor Yellow
        return $false
    }
}

# Function to display system information
function Show-SystemInfo {
    Write-Host ""
    Write-Host "üìä System Information" -ForegroundColor Cyan
    Write-Host "====================" -ForegroundColor Cyan
    Write-Host "OS: $([System.Environment]::OSVersion.VersionString)" -ForegroundColor White
    Write-Host "PowerShell: $($PSVersionTable.PSVersion)" -ForegroundColor White
    Write-Host "Working Directory: $(Get-Location)" -ForegroundColor White
    Write-Host ""
}

# Main execution
try {
    Show-Banner
    Show-SystemInfo
    
    # Check prerequisites
    Write-Host "üîç Checking prerequisites..." -ForegroundColor Yellow
    Write-Host "=============================" -ForegroundColor Yellow
    
    if (-not (Test-Python)) {
        Write-Host ""
        Write-Host "‚ùå Python is required to run the frontend." -ForegroundColor Red
        Write-Host "Please install Python 3.11 or later from https://python.org" -ForegroundColor Yellow
        exit 1
    }
    
    if (-not (Test-Streamlit)) {
        Write-Host ""
        Write-Host "‚ùå Streamlit is required to run the frontend." -ForegroundColor Red
        Write-Host "Please install Streamlit manually: pip install streamlit" -ForegroundColor Yellow
        exit 1
    }
    
    # Get API URL
    $ApiUrl = Get-ApiUrl
    
    # Test API access
    Test-ApiAccess -ApiUrl $ApiUrl
    
    # Create environment file
    Set-EnvironmentFile -ApiUrl $ApiUrl -Environment $Environment
    
    # Start Streamlit
    Start-Streamlit -ApiUrl $ApiUrl -Environment $Environment -Port $Port
    
} catch {
    Write-Host ""
    Write-Host "‚ùå An error occurred: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host ""
    Write-Host "Troubleshooting tips:" -ForegroundColor Yellow
    Write-Host "1. Make sure you're in the project root directory" -ForegroundColor White
    Write-Host "2. Check that Python and Streamlit are installed" -ForegroundColor White
    Write-Host "3. Verify the API Gateway URL is correct" -ForegroundColor White
    Write-Host "4. Check your internet connection" -ForegroundColor White
    Write-Host ""
    exit 1
} finally {
    Write-Host ""
    Write-Host "üëã Frontend session ended." -ForegroundColor Cyan
    Write-Host "Thank you for using RAG Chatbot!" -ForegroundColor Green
}
