# RAG Chatbot Frontend Launcher with Auto-Discovery
# Advanced PowerShell script with automatic API URL detection
# Copyright (c) 2025 RAG Chatbot Project

param(
    [string]$ApiUrl = "",
    [string]$Environment = "prod",
    [int]$Port = 8501,
    [switch]$AutoDiscover,
    [switch]$Help
)

# Display help
if ($Help) {
    Write-Host "RAG Chatbot Frontend Launcher" -ForegroundColor Green
    Write-Host "=============================" -ForegroundColor Green
    Write-Host ""
    Write-Host "Usage: .\launch-frontend.ps1 [options]" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "Options:" -ForegroundColor Yellow
    Write-Host "  -ApiUrl <url>       API Gateway URL"
    Write-Host "  -Environment <env>  Environment (default: prod)"
    Write-Host "  -Port <number>      Port number (default: 8501)"
    Write-Host "  -AutoDiscover       Try to discover API URL from Terraform"
    Write-Host "  -Help               Show this help"
    Write-Host ""
    exit 0
}

# Function to display banner
function Show-Banner {
    Clear-Host
    Write-Host ""
    Write-Host "ü§ñ RAG Chatbot Frontend Launcher" -ForegroundColor Cyan
    Write-Host "=================================" -ForegroundColor Cyan
    Write-Host "   Advanced launcher with auto-discovery" -ForegroundColor Gray
    Write-Host ""
}

# Function to discover API URL from Terraform
function Get-TerraformApiUrl {
    Write-Host "üîç Discovering API URL from Terraform..." -ForegroundColor Yellow
    
    try {
        # Check if we're in the right directory
        if (-not (Test-Path "infrastructure/terraform/terraform.tfstate")) {
            Write-Host "‚ö†Ô∏è  No Terraform state found. Run 'terraform apply' first." -ForegroundColor Yellow
            return $null
        }
        
        # Try to get API URL from Terraform output
        Push-Location "infrastructure/terraform"
        try {
            $output = terraform output -json 2>$null
            if ($LASTEXITCODE -eq 0) {
                $json = $output | ConvertFrom-Json
                if ($json.api_gateway_url -and $json.api_gateway_url.value) {
                    Write-Host "‚úÖ Found API URL in Terraform output" -ForegroundColor Green
                    return $json.api_gateway_url.value
                }
            }
        } finally {
            Pop-Location
        }
        
        # Try to get from outputs.tf or outputs.json
        if (Test-Path "infrastructure/terraform/outputs.json") {
            $outputs = Get-Content "infrastructure/terraform/outputs.json" | ConvertFrom-Json
            if ($outputs.api_gateway_url) {
                Write-Host "‚úÖ Found API URL in outputs.json" -ForegroundColor Green
                return $outputs.api_gateway_url
            }
        }
        
        Write-Host "‚ö†Ô∏è  Could not discover API URL from Terraform" -ForegroundColor Yellow
        return $null
        
    } catch {
        Write-Host "‚ö†Ô∏è  Error discovering API URL: $($_.Exception.Message)" -ForegroundColor Yellow
        return $null
    }
}

# Function to test API connectivity
function Test-ApiConnectivity {
    param([string]$Url)
    
    Write-Host "üîç Testing API connectivity..." -ForegroundColor Yellow
    
    try {
        $response = Invoke-RestMethod -Uri "$Url/health" -Method GET -TimeoutSec 5
        Write-Host "‚úÖ API is accessible and healthy" -ForegroundColor Green
        return $true
    } catch {
        try {
            $response = Invoke-RestMethod -Uri "$Url" -Method GET -TimeoutSec 5
            Write-Host "‚úÖ API is accessible" -ForegroundColor Green
            return $true
        } catch {
            Write-Host "‚ö†Ô∏è  Warning: API may not be accessible" -ForegroundColor Yellow
            Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
            return $false
        }
    }
}

# Function to install requirements
function Install-Requirements {
    Write-Host "üì¶ Installing Python requirements..." -ForegroundColor Yellow
    
    $requirementsFile = "application/frontend/requirements.txt"
    if (Test-Path $requirementsFile) {
        pip install -r $requirementsFile
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Requirements installed successfully" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  Some requirements may not have installed correctly" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ö†Ô∏è  No requirements.txt found, installing basic requirements..." -ForegroundColor Yellow
        pip install streamlit requests python-dotenv
    }
}

# Function to create .env file
function Create-EnvFile {
    param([string]$ApiUrl, [string]$Environment)
    
    $envContent = @"
# RAG Chatbot Environment Configuration
# Generated by launch-frontend.ps1 on $(Get-Date)

API_GATEWAY_URL=$ApiUrl
ENVIRONMENT=$Environment
"@
    
    $envFile = "application/frontend/.env"
    $envContent | Out-File -FilePath $envFile -Encoding UTF8 -Force
    Write-Host "‚úÖ Environment file created: $envFile" -ForegroundColor Green
}

# Function to start Streamlit
function Start-StreamlitApp {
    param([string]$ApiUrl, [string]$Environment, [int]$Port)
    
    Write-Host ""
    Write-Host "üöÄ Launching RAG Chatbot Frontend..." -ForegroundColor Green
    Write-Host "====================================" -ForegroundColor Green
    Write-Host ""
    Write-Host "Configuration:" -ForegroundColor Yellow
    Write-Host "  üåê API URL: $ApiUrl" -ForegroundColor White
    Write-Host "  üè∑Ô∏è  Environment: $Environment" -ForegroundColor White
    Write-Host "  üîå Port: $Port" -ForegroundColor White
    Write-Host "  üåç Address: localhost" -ForegroundColor White
    Write-Host ""
    Write-Host "üì± The application will open in your default browser" -ForegroundColor Cyan
    Write-Host "üõë Press Ctrl+C to stop the server" -ForegroundColor Gray
    Write-Host ""
    
    # Set environment variables
    $env:API_GATEWAY_URL = $ApiUrl
    $env:ENVIRONMENT = $Environment
    
    # Change to frontend directory
    Push-Location "application/frontend"
    
    try {
        # Run Streamlit with custom configuration
        streamlit run app.py `
            --server.port $Port `
            --server.address localhost `
            --browser.gatherUsageStats false `
            --server.headless false `
            --server.runOnSave true
    } catch {
        Write-Host "‚ùå Error starting Streamlit: $($_.Exception.Message)" -ForegroundColor Red
        throw
    } finally {
        Pop-Location
    }
}

# Function to show system status
function Show-SystemStatus {
    Write-Host "üìä System Status" -ForegroundColor Cyan
    Write-Host "===============" -ForegroundColor Cyan
    Write-Host "OS: $([System.Environment]::OSVersion.VersionString)" -ForegroundColor White
    Write-Host "PowerShell: $($PSVersionTable.PSVersion)" -ForegroundColor White
    Write-Host "Python: $(python --version 2>&1)" -ForegroundColor White
    Write-Host "Working Directory: $(Get-Location)" -ForegroundColor White
    Write-Host ""
}

# Main execution
try {
    Show-Banner
    Show-SystemStatus
    
    # Check if we're in the right directory
    if (-not (Test-Path "application/frontend/app.py")) {
        Write-Host "‚ùå Error: Please run this script from the project root directory" -ForegroundColor Red
        Write-Host "   Current directory: $(Get-Location)" -ForegroundColor Yellow
        Write-Host "   Expected: RAG chatbot project root" -ForegroundColor Yellow
        exit 1
    }
    
    # Check Python installation
    try {
        $pythonVersion = python --version 2>&1
        if ($LASTEXITCODE -ne 0) {
            throw "Python not found"
        }
        Write-Host "‚úÖ Python found: $pythonVersion" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Python not found. Please install Python 3.11 or later." -ForegroundColor Red
        Write-Host "   Download from: https://python.org" -ForegroundColor Yellow
        exit 1
    }
    
    # Auto-discover API URL if requested
    if ($AutoDiscover -and $ApiUrl -eq "") {
        $ApiUrl = Get-TerraformApiUrl
    }
    
    # Get API URL if not provided
    if ($ApiUrl -eq "") {
        Write-Host ""
        Write-Host "üîó API Gateway Configuration" -ForegroundColor Yellow
        Write-Host "=============================" -ForegroundColor Yellow
        Write-Host ""
        Write-Host "Please provide your API Gateway URL:" -ForegroundColor White
        Write-Host "Example: https://abc123def4.execute-api.ap-southeast-1.amazonaws.com/prod" -ForegroundColor Gray
        Write-Host ""
        
        do {
            $ApiUrl = Read-Host "Enter API Gateway URL"
            if ($ApiUrl -eq "") {
                Write-Host "‚ùå API URL cannot be empty" -ForegroundColor Red
            }
        } while ($ApiUrl -eq "")
    }
    
    # Test API connectivity
    Test-ApiConnectivity -Url $ApiUrl
    
    # Install requirements
    Install-Requirements
    
    # Create environment file
    Create-EnvFile -ApiUrl $ApiUrl -Environment $Environment
    
    # Start the application
    Start-StreamlitApp -ApiUrl $ApiUrl -Environment $Environment -Port $Port
    
} catch {
    Write-Host ""
    Write-Host "‚ùå An error occurred: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host ""
    Write-Host "Troubleshooting tips:" -ForegroundColor Yellow
    Write-Host "1. Make sure you're in the project root directory" -ForegroundColor White
    Write-Host "2. Check that Python is installed and in PATH" -ForegroundColor White
    Write-Host "3. Verify the API Gateway URL is correct" -ForegroundColor White
    Write-Host "4. Run 'terraform apply' to deploy the backend" -ForegroundColor White
    Write-Host "5. Check your internet connection" -ForegroundColor White
    Write-Host ""
    exit 1
} finally {
    Write-Host ""
    Write-Host "üëã Frontend session ended." -ForegroundColor Cyan
    Write-Host "Thank you for using RAG Chatbot!" -ForegroundColor Green
}
