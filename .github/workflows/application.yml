name: Application Build and Deploy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'application/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'application/**'

env:
  AWS_REGION: 'us-east-1'
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  ECR_REPOSITORY: rag-chatbot

jobs:
  build-frontend:
    name: 'Build Frontend Container'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push frontend image
      id: build-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd application/frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-frontend:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-frontend:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY-frontend:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Output image name
      run: 'echo "Frontend image: ${{ steps.build-frontend.outputs.image }}"'

  build-lambda:
    name: 'Build Lambda Package'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd application/backend
        pip install -r requirements.txt -t .

    - name: Create Lambda deployment package
      run: |
        cd application/backend
        zip -r lambda-deployment.zip .

    - name: Upload Lambda package
      uses: actions/upload-artifact@v3
      with:
        name: lambda-package
        path: application/backend/lambda-deployment.zip

  deploy-ecs:
    name: 'Deploy to ECS'
    runs-on: ubuntu-latest
    needs: build-frontend
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster rag-chatbot-prod-cluster \
          --service rag-chatbot-prod-service \
          --force-new-deployment

    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster rag-chatbot-prod-cluster \
          --services rag-chatbot-prod-service

  deploy-lambda:
    name: 'Deploy Lambda Function'
    runs-on: ubuntu-latest
    needs: build-lambda
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Download Lambda package
      uses: actions/download-artifact@v3
      with:
        name: lambda-package
        path: .

    - name: Update Lambda function
      run: |
        aws lambda update-function-code \
          --function-name rag-chatbot-prod-rag-chatbot \
          --zip-file fileb://lambda-deployment.zip

  test-application:
    name: 'Test Application'
    runs-on: ubuntu-latest
    needs: [deploy-ecs, deploy-lambda]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get API Gateway URL
      id: get-api-url
      run: |
        API_URL=$(aws apigateway get-rest-apis --query 'items[?name==`rag-chatbot-prod-api`].id' --output text)
        echo "api_url=https://$API_URL.execute-api.${{ secrets.AWS_REGION }}.amazonaws.com/prod" >> $GITHUB_OUTPUT

    - name: Test API endpoint
      run: |
        curl -X POST ${{ steps.get-api-url.outputs.api_url }}/chat \
          -H "Content-Type: application/json" \
          -d '{"message": "Hello, test message", "session_id": "test-session", "user_id": "test-user"}' \
          --max-time 30

    - name: Test ECS service health
      run: |
        # Get ALB DNS name from Terraform output or AWS CLI
        ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `rag-chatbot-prod`)].DNSName' --output text)
        curl -f http://$ALB_DNS/_stcore/health --max-time 30
